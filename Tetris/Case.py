from Block import Block
##-------------------------------------------------------------------------------------------------##
## Case 클래스
##-------------------------------------------------------------------------------------------------##
class Case:
    def __init__(self):
        self.__x = 4
        self.__y = 0
        self.__Blocks = []
        self.__Block = []
        self.__Color = ()
        self.__dir = 0
        self.__Out_Bposs = []
        self.__IN_Bposs = []
        self.__minxy = []
        self.__maxxy = []
    ##--------------------------------------------------------------------------------------------##
    ## case의 좌표 반환
    ##--------------------------------------------------------------------------------------------##
    def getPos(self):
        return self.__x, self.__y
    ##--------------------------------------------------------------------------------------------##
    ## case의 좌표 설정
    ##--------------------------------------------------------------------------------------------##
    def setPos(self, x, y):
        self.__x = x
        self.__y = y
        self.__Out_change()
    ##--------------------------------------------------------------------------------------------##
    ## case의 블럭 모양 설정
    ##--------------------------------------------------------------------------------------------##
    def setBlock(self, block, count):
        self.__Blocks = [Block() for _ in range(count)]
        self.__Block = block
        ## 블럭 모양에 따라 위치 교정
        # 첫 번쨰 가로열이 모두 0 이면 Case의 y 좌표 -1
        if 1 not in self.__Block[self.__dir][0]:
            self.__y = -1
        # 첫 번째 세로행이 모두 0 이면 Case의 x 좌표 3
        if 1 not in list(zip(*self.__Block[self.__dir]))[0]:
            self.__x = 3
        self.__In_Change()     
    ##--------------------------------------------------------------------------------------------##
    ## Case 내의 Block 내부 좌표 정보 변경
    ##--------------------------------------------------------------------------------------------##
    def __In_Change(self):
        self.__IN_Bposs = []
        ## case 좌표 기반으로 block의 최초 좌표 설정
        for i in range(3):
            for j in range(3):
                if self.__Block[self.__dir][i][j] == 1:
                    # 각 Block의 현재 내부 좌표
                    self.__IN_Bposs.append([j,i])
        self.__Out_change()
    ##--------------------------------------------------------------------------------------------##
    ## case내의 block들의 좌표 반환
    ##--------------------------------------------------------------------------------------------##
    def getBlockPos(self):
        return [Block.getPos() for Block in self.__Blocks]
    ##--------------------------------------------------------------------------------------------##
    ## case의 블럭 색상 설정
    ##--------------------------------------------------------------------------------------------##
    def setColor(self, color):
        self.__Color = color
    ##---------------------------------------------------------------------------------------------##
    ## case의 블럭 생상 반환
    ##---------------------------------------------------------------------------------------------##
    def getColor(self):
        return self.__Color
    ##---------------------------------------------------------------------------------------------##
    ## Case 내의 Block 외부 좌표 정보 변경
    ##---------------------------------------------------------------------------------------------##
    def __Out_change(self):
        self.__Out_Bposs = []
        ## case 좌표 기반으로 block의 좌표 설정
        for i, (x, y) in enumerate(self.__IN_Bposs):
            # 각 Block 들의 좌표 설정 (case 좌표 + case내의 block위치)
            self.__Blocks[i].setPos(self.__x + x, self.__y + y)
            # 각 Block의 현재 외부 좌표
            self.__Out_Bposs.append(self.__Blocks[i].getPos())
        x, y = zip(*self.__Out_Bposs)
        self.__minxy = [min(x), min(y)]
        self.__maxxy = [max(x), max(y)]
    ##---------------------------------------------------------------------------------------------##
    ## case 좌표 밑으로 내리기
    ##---------------------------------------------------------------------------------------------##
    def Move_Down(self):
        self.__y += 1
        if self.__maxxy[1] > 18:
            self.__y -= 1
        self.__Out_change()
    ##---------------------------------------------------------------------------------------------##
    ## case 좌표 밑으로 내리기
    ##---------------------------------------------------------------------------------------------##
    def Move_Left(self):
        self.__x -= 1
        if self.__minxy[0] <= 0:
            self.__x += 1
        self.__Out_change()
    ##---------------------------------------------------------------------------------------------##
    ## case 좌표 밑으로 내리기
    ##---------------------------------------------------------------------------------------------##
    def Move_Right(self):
        self.__x += 1
        if self.__maxxy[0] >= 9:
            self.__x -= 1
        self.__Out_change()
    ##---------------------------------------------------------------------------------------------##
    ## block 회전
    ##---------------------------------------------------------------------------------------------##
    def Turn(self):
        if self.__dir < 3:
            self.__dir += 1
        elif self.__dir == 3:
            self.__dir = 0
        self.__In_Change()
    ##---------------------------------------------------------------------------------------------##
    ## block 역회전
    ##---------------------------------------------------------------------------------------------##
    def Re_Turn(self):
        if self.__dir > 0:
            self.__dir -= 1
        elif self.__dir == 0:
            self.__dir = 3
        self.__In_Change()
